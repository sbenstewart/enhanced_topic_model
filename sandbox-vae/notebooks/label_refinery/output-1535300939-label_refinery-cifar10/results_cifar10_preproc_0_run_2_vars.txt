{'__name__': '__main__', '__doc__': 'Automatically created module for IPython interactive environment', '__package__': None, '__loader__': None, '__spec__': None, '__builtin__': <module 'builtins' (built-in)>, '__builtins__': <module 'builtins' (built-in)>, '_ih': ['', "get_ipython().run_line_magic('load_ext', 'autoreload')\nget_ipython().run_line_magic('matplotlib', 'inline')\nget_ipython().run_line_magic('autoreload', '2')", 'import numpy as np\nimport os\nimport time\nimport h5py\nimport keras\nimport pandas as pd\nimport math\nimport joblib\nimport json\nimport matplotlib.pyplot as plt\n\nfrom IPython.display import display\n\nfrom keras.layers import (Input, Dense, Lambda, Flatten, Reshape, BatchNormalization, \n                          Activation, Dropout, Conv2D, Conv2DTranspose,\n                          Concatenate, Add, Multiply)\nfrom keras.regularizers import l2\nfrom keras.initializers import RandomUniform\nfrom keras.optimizers import RMSprop, Adam, SGD\nfrom keras.models import Model\nfrom keras import metrics\nfrom keras import backend as K\nfrom keras_tqdm import TQDMNotebookCallback\nfrom keras.datasets import cifar10\nfrom keras.preprocessing.image import ImageDataGenerator\n\nfrom resnet import *', "img_rows, img_cols, img_chns = 32, 32, 3\noriginal_img_size = (img_rows, img_cols, img_chns)\nnum_classes = 10\nlearning_rate = float(os.environ.get('LEARNING_RATE', 0.001))\ndecay = float(os.environ.get('DECAY', 0.0))\nbatch_size = int(os.environ.get('BATCH_SIZE', 250))\nepochs = int(os.environ.get('EPOCHS', 100))\nrun_num = int(os.environ.get('RUN_NUM', 0))\nuse_preprocessing = int(os.environ.get('USE_PREPROCESSING', 1))\n\nfile_prefix = 'results_cifar10_preproc_%d_run_%d_' % (use_preprocessing, run_num)", '(X_train_raw, y_train_raw), (X_test, y_test) = cifar10.load_data()\nX_train_raw = X_train_raw / 255.\ny_train_raw = keras.utils.to_categorical(y_train_raw, 10)\nX_test = X_test / 255.\ny_test = keras.utils.to_categorical(y_test, 10)\n\nvalidation_index = int(len(X_train_raw) * 0.85)\nX_validation, y_validation = X_train_raw[validation_index:], y_train_raw[validation_index:]\nX_train, y_train = X_train_raw[:validation_index], y_train_raw[:validation_index]\n\nprint("raw", len(X_train_raw), len(y_train_raw))\nprint("validation", len(X_validation), len(y_validation))\nprint("train", len(X_train), len(y_train))\nprint("test", len(X_test), len(y_test))', "# Augment data\nif use_preprocessing:\n    datagen = ImageDataGenerator(\n        zoom_range=0.10,\n        horizontal_flip=True,\n        width_shift_range=0.1,\n        height_shift_range=0.1,\n        fill_mode='constant',\n        rotation_range=10)\n    datagen.fit(X_train)\n          \n    X_aug = [X_train]\n    y_aug = [y_train]\n    for i in range(2):\n        X_gen, y_gen = next(datagen.flow(X_train,  y_train, batch_size=len(X_train)))\n        X_aug.append(X_gen)\n        y_aug.append(y_gen)\n        \n    X_train = np.concatenate(tuple(X_aug))\n    y_train = np.concatenate(tuple(y_aug))\n    del X_aug, y_aug, X_gen, y_gen\n    print(X_train.shape, X_train.shape)", "def display_grid(dataset, digit_size=32, grid_size=5, seed=None):\n    # Display some digits to figure out what's going on\n    figure = np.zeros((digit_size * grid_size, digit_size * grid_size, 3))\n   \n    if seed is not None:\n        np.random.seed(seed)\n    for i in range(grid_size):\n        for j in range(grid_size):\n            digit = dataset[np.random.randint(len(dataset))]\n            d_x, d_y = i * digit_size, j * digit_size\n            figure[d_x:d_x + digit_size, d_y:d_y + digit_size, :] = digit.astype(float)\n            \n    plt.figure(figsize=(5, 5))\n    plt.imshow(figure)\n    plt.show()\n\ndisplay_grid(X_train, seed=0)\ndisplay_grid(X_test, seed=0)", "def make_model():\n    x_input = Input(batch_shape=(None,) + original_img_size)\n    resnet_model = ResNet50(weights=None, pooling='avg', input_shape=original_img_size, include_top=False)\n    model_out = resnet_model(x_input)\n    out = Dense(num_classes, activation='softmax', name='fc10')(model_out)\n    model = Model(x_input, out, name='myresent50')\n    return model", 'def train_model(model, y_train_vals):\n    optimizer = Adam(lr=learning_rate, decay=decay)\n    model.compile(optimizer=optimizer,\n                  loss=\'categorical_crossentropy\',\n                  metrics=[\'accuracy\'])\n    \n    start = time.time()\n    \n    early_stopping = keras.callbacks.EarlyStopping(\'val_acc\', min_delta=0.1, patience=20)\n    reduce_lr = keras.callbacks.ReduceLROnPlateau(monitor=\'val_acc\', factor=0.1, patience=10, min_lr=0.01 * learning_rate)\n    \n    callbacks=[early_stopping, reduce_lr]\n    if \'CMDLINE\' not in os.environ:\n        callbacks += [TQDMNotebookCallback()]\n        \n    history = model.fit(\n         X_train, y_train_vals,\n         batch_size=batch_size,\n         epochs=epochs,\n         callbacks=callbacks,\n         validation_data=(X_validation, y_validation),\n         verbose=0\n     )\n    \n    done = time.time()\n    elapsed = done - start\n    print("Elapsed: ", elapsed)\n    \n    return model, history', 'model = make_model()\nmodel.summary()', '# Testing\n# epochs=1\n# model, history = train_model(model, y_train)\n# history.history', 'y_train_predict = y_train\nfor i in range(3):\n    print("Iteration", i)\n    model = make_model()\n    model.summary()\n    model, history = train_model(model, y_train_predict)\n    \n    df = pd.DataFrame(history.history)\n    display(df.describe(percentiles=[0.25 * i for i in range(4)] + [0.95, 0.99]))\n    df.plot(figsize=(8, 6))\n    df.to_csv(file_prefix + (\'history_iter%d\' % i) + \'.csv\', index=False)\n    with open(file_prefix + \'vars.txt\', \'w\') as f:\n        f.write(str(locals()))\n    \n    y_train_predict = model.predict(X_train)\n    y_train_predict\n    \n    test_results = model.evaluate(X_test, y_test)\n    print(test_results)\n    with open(\'allresults.csv\', \'a\') as f:\n        line = \',\'.join([str(use_preprocessing), str(run_num), str(i)] + [str(x) for x in test_results])\n        f.write(line + \'\\n\')'], '_oh': {}, '_dh': ['/home/brian/devel/sandbox/notebooks/label_refinery'], 'In': ['', "get_ipython().run_line_magic('load_ext', 'autoreload')\nget_ipython().run_line_magic('matplotlib', 'inline')\nget_ipython().run_line_magic('autoreload', '2')", 'import numpy as np\nimport os\nimport time\nimport h5py\nimport keras\nimport pandas as pd\nimport math\nimport joblib\nimport json\nimport matplotlib.pyplot as plt\n\nfrom IPython.display import display\n\nfrom keras.layers import (Input, Dense, Lambda, Flatten, Reshape, BatchNormalization, \n                          Activation, Dropout, Conv2D, Conv2DTranspose,\n                          Concatenate, Add, Multiply)\nfrom keras.regularizers import l2\nfrom keras.initializers import RandomUniform\nfrom keras.optimizers import RMSprop, Adam, SGD\nfrom keras.models import Model\nfrom keras import metrics\nfrom keras import backend as K\nfrom keras_tqdm import TQDMNotebookCallback\nfrom keras.datasets import cifar10\nfrom keras.preprocessing.image import ImageDataGenerator\n\nfrom resnet import *', "img_rows, img_cols, img_chns = 32, 32, 3\noriginal_img_size = (img_rows, img_cols, img_chns)\nnum_classes = 10\nlearning_rate = float(os.environ.get('LEARNING_RATE', 0.001))\ndecay = float(os.environ.get('DECAY', 0.0))\nbatch_size = int(os.environ.get('BATCH_SIZE', 250))\nepochs = int(os.environ.get('EPOCHS', 100))\nrun_num = int(os.environ.get('RUN_NUM', 0))\nuse_preprocessing = int(os.environ.get('USE_PREPROCESSING', 1))\n\nfile_prefix = 'results_cifar10_preproc_%d_run_%d_' % (use_preprocessing, run_num)", '(X_train_raw, y_train_raw), (X_test, y_test) = cifar10.load_data()\nX_train_raw = X_train_raw / 255.\ny_train_raw = keras.utils.to_categorical(y_train_raw, 10)\nX_test = X_test / 255.\ny_test = keras.utils.to_categorical(y_test, 10)\n\nvalidation_index = int(len(X_train_raw) * 0.85)\nX_validation, y_validation = X_train_raw[validation_index:], y_train_raw[validation_index:]\nX_train, y_train = X_train_raw[:validation_index], y_train_raw[:validation_index]\n\nprint("raw", len(X_train_raw), len(y_train_raw))\nprint("validation", len(X_validation), len(y_validation))\nprint("train", len(X_train), len(y_train))\nprint("test", len(X_test), len(y_test))', "# Augment data\nif use_preprocessing:\n    datagen = ImageDataGenerator(\n        zoom_range=0.10,\n        horizontal_flip=True,\n        width_shift_range=0.1,\n        height_shift_range=0.1,\n        fill_mode='constant',\n        rotation_range=10)\n    datagen.fit(X_train)\n          \n    X_aug = [X_train]\n    y_aug = [y_train]\n    for i in range(2):\n        X_gen, y_gen = next(datagen.flow(X_train,  y_train, batch_size=len(X_train)))\n        X_aug.append(X_gen)\n        y_aug.append(y_gen)\n        \n    X_train = np.concatenate(tuple(X_aug))\n    y_train = np.concatenate(tuple(y_aug))\n    del X_aug, y_aug, X_gen, y_gen\n    print(X_train.shape, X_train.shape)", "def display_grid(dataset, digit_size=32, grid_size=5, seed=None):\n    # Display some digits to figure out what's going on\n    figure = np.zeros((digit_size * grid_size, digit_size * grid_size, 3))\n   \n    if seed is not None:\n        np.random.seed(seed)\n    for i in range(grid_size):\n        for j in range(grid_size):\n            digit = dataset[np.random.randint(len(dataset))]\n            d_x, d_y = i * digit_size, j * digit_size\n            figure[d_x:d_x + digit_size, d_y:d_y + digit_size, :] = digit.astype(float)\n            \n    plt.figure(figsize=(5, 5))\n    plt.imshow(figure)\n    plt.show()\n\ndisplay_grid(X_train, seed=0)\ndisplay_grid(X_test, seed=0)", "def make_model():\n    x_input = Input(batch_shape=(None,) + original_img_size)\n    resnet_model = ResNet50(weights=None, pooling='avg', input_shape=original_img_size, include_top=False)\n    model_out = resnet_model(x_input)\n    out = Dense(num_classes, activation='softmax', name='fc10')(model_out)\n    model = Model(x_input, out, name='myresent50')\n    return model", 'def train_model(model, y_train_vals):\n    optimizer = Adam(lr=learning_rate, decay=decay)\n    model.compile(optimizer=optimizer,\n                  loss=\'categorical_crossentropy\',\n                  metrics=[\'accuracy\'])\n    \n    start = time.time()\n    \n    early_stopping = keras.callbacks.EarlyStopping(\'val_acc\', min_delta=0.1, patience=20)\n    reduce_lr = keras.callbacks.ReduceLROnPlateau(monitor=\'val_acc\', factor=0.1, patience=10, min_lr=0.01 * learning_rate)\n    \n    callbacks=[early_stopping, reduce_lr]\n    if \'CMDLINE\' not in os.environ:\n        callbacks += [TQDMNotebookCallback()]\n        \n    history = model.fit(\n         X_train, y_train_vals,\n         batch_size=batch_size,\n         epochs=epochs,\n         callbacks=callbacks,\n         validation_data=(X_validation, y_validation),\n         verbose=0\n     )\n    \n    done = time.time()\n    elapsed = done - start\n    print("Elapsed: ", elapsed)\n    \n    return model, history', 'model = make_model()\nmodel.summary()', '# Testing\n# epochs=1\n# model, history = train_model(model, y_train)\n# history.history', 'y_train_predict = y_train\nfor i in range(3):\n    print("Iteration", i)\n    model = make_model()\n    model.summary()\n    model, history = train_model(model, y_train_predict)\n    \n    df = pd.DataFrame(history.history)\n    display(df.describe(percentiles=[0.25 * i for i in range(4)] + [0.95, 0.99]))\n    df.plot(figsize=(8, 6))\n    df.to_csv(file_prefix + (\'history_iter%d\' % i) + \'.csv\', index=False)\n    with open(file_prefix + \'vars.txt\', \'w\') as f:\n        f.write(str(locals()))\n    \n    y_train_predict = model.predict(X_train)\n    y_train_predict\n    \n    test_results = model.evaluate(X_test, y_test)\n    print(test_results)\n    with open(\'allresults.csv\', \'a\') as f:\n        line = \',\'.join([str(use_preprocessing), str(run_num), str(i)] + [str(x) for x in test_results])\n        f.write(line + \'\\n\')'], 'Out': {}, 'get_ipython': <bound method InteractiveShell.get_ipython of <ipykernel.zmqshell.ZMQInteractiveShell object at 0x7f439b5129b0>>, 'exit': <IPython.core.autocall.ZMQExitAutocall object at 0x7f439b4e1fd0>, 'quit': <IPython.core.autocall.ZMQExitAutocall object at 0x7f439b4e1fd0>, '_': '', '__': '', '___': '', '_i': '# Testing\n# epochs=1\n# model, history = train_model(model, y_train)\n# history.history', '_ii': 'model = make_model()\nmodel.summary()', '_iii': 'def train_model(model, y_train_vals):\n    optimizer = Adam(lr=learning_rate, decay=decay)\n    model.compile(optimizer=optimizer,\n                  loss=\'categorical_crossentropy\',\n                  metrics=[\'accuracy\'])\n    \n    start = time.time()\n    \n    early_stopping = keras.callbacks.EarlyStopping(\'val_acc\', min_delta=0.1, patience=20)\n    reduce_lr = keras.callbacks.ReduceLROnPlateau(monitor=\'val_acc\', factor=0.1, patience=10, min_lr=0.01 * learning_rate)\n    \n    callbacks=[early_stopping, reduce_lr]\n    if \'CMDLINE\' not in os.environ:\n        callbacks += [TQDMNotebookCallback()]\n        \n    history = model.fit(\n         X_train, y_train_vals,\n         batch_size=batch_size,\n         epochs=epochs,\n         callbacks=callbacks,\n         validation_data=(X_validation, y_validation),\n         verbose=0\n     )\n    \n    done = time.time()\n    elapsed = done - start\n    print("Elapsed: ", elapsed)\n    \n    return model, history', '_i1': '%load_ext autoreload\n%matplotlib inline\n%autoreload 2', '_i2': 'import numpy as np\nimport os\nimport time\nimport h5py\nimport keras\nimport pandas as pd\nimport math\nimport joblib\nimport json\nimport matplotlib.pyplot as plt\n\nfrom IPython.display import display\n\nfrom keras.layers import (Input, Dense, Lambda, Flatten, Reshape, BatchNormalization, \n                          Activation, Dropout, Conv2D, Conv2DTranspose,\n                          Concatenate, Add, Multiply)\nfrom keras.regularizers import l2\nfrom keras.initializers import RandomUniform\nfrom keras.optimizers import RMSprop, Adam, SGD\nfrom keras.models import Model\nfrom keras import metrics\nfrom keras import backend as K\nfrom keras_tqdm import TQDMNotebookCallback\nfrom keras.datasets import cifar10\nfrom keras.preprocessing.image import ImageDataGenerator\n\nfrom resnet import *', 'np': <module 'numpy' from '/home/brian/anaconda3/lib/python3.6/site-packages/numpy/__init__.py'>, 'os': <module 'os' from '/home/brian/anaconda3/lib/python3.6/os.py'>, 'time': <module 'time' (built-in)>, 'h5py': <module 'h5py' from '/home/brian/anaconda3/lib/python3.6/site-packages/h5py/__init__.py'>, 'keras': <module 'keras' from '/home/brian/anaconda3/lib/python3.6/site-packages/keras/__init__.py'>, 'pd': <module 'pandas' from '/home/brian/anaconda3/lib/python3.6/site-packages/pandas/__init__.py'>, 'math': <module 'math' from '/home/brian/anaconda3/lib/python3.6/lib-dynload/math.cpython-36m-x86_64-linux-gnu.so'>, 'joblib': <module 'joblib' from '/home/brian/anaconda3/lib/python3.6/site-packages/joblib/__init__.py'>, 'json': <module 'json' from '/home/brian/anaconda3/lib/python3.6/json/__init__.py'>, 'plt': <module 'matplotlib.pyplot' from '/home/brian/anaconda3/lib/python3.6/site-packages/matplotlib/pyplot.py'>, 'display': <function display at 0x7f43a0aea268>, 'Input': <function Input at 0x7f434447abf8>, 'Dense': <class 'keras.layers.core.Dense'>, 'Lambda': <class 'keras.layers.core.Lambda'>, 'Flatten': <class 'keras.layers.core.Flatten'>, 'Reshape': <class 'keras.layers.core.Reshape'>, 'BatchNormalization': <class 'keras.layers.normalization.BatchNormalization'>, 'Activation': <class 'keras.layers.core.Activation'>, 'Dropout': <class 'keras.layers.core.Dropout'>, 'Conv2D': <class 'keras.layers.convolutional.Conv2D'>, 'Conv2DTranspose': <class 'keras.layers.convolutional.Conv2DTranspose'>, 'Concatenate': <class 'keras.layers.merge.Concatenate'>, 'Add': <class 'keras.layers.merge.Add'>, 'Multiply': <class 'keras.layers.merge.Multiply'>, 'l2': <function l2 at 0x7f4336ee82f0>, 'RandomUniform': <class 'keras.initializers.RandomUniform'>, 'RMSprop': <class 'keras.optimizers.RMSprop'>, 'Adam': <class 'keras.optimizers.Adam'>, 'SGD': <class 'keras.optimizers.SGD'>, 'Model': <class 'keras.engine.training.Model'>, 'metrics': <module 'keras.metrics' from '/home/brian/anaconda3/lib/python3.6/site-packages/keras/metrics.py'>, 'K': <module 'keras.backend' from '/home/brian/anaconda3/lib/python3.6/site-packages/keras/backend/__init__.py'>, 'TQDMNotebookCallback': <class 'keras_tqdm.tqdm_notebook_callback.TQDMNotebookCallback'>, 'cifar10': <module 'keras.datasets.cifar10' from '/home/brian/anaconda3/lib/python3.6/site-packages/keras/datasets/cifar10.py'>, 'ImageDataGenerator': <class 'keras.preprocessing.image.ImageDataGenerator'>, 'absolute_import': _Feature((2, 5, 0, 'alpha', 1), (3, 0, 0, 'alpha', 0), 16384), 'division': _Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192), 'print_function': _Feature((2, 6, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 65536), 'warnings': <module 'warnings' from '/home/brian/anaconda3/lib/python3.6/warnings.py'>, 'backend': <module 'keras.backend' from '/home/brian/anaconda3/lib/python3.6/site-packages/keras/backend/__init__.py'>, 'layers': <module 'keras.layers' from '/home/brian/anaconda3/lib/python3.6/site-packages/keras/layers/__init__.py'>, 'models': <module 'keras.models' from '/home/brian/anaconda3/lib/python3.6/site-packages/keras/models.py'>, 'keras_utils': <module 'keras.utils' from '/home/brian/anaconda3/lib/python3.6/site-packages/keras/utils/__init__.py'>, 'imagenet_utils': <module 'imagenet_utils' from '/home/brian/devel/sandbox/notebooks/label_refinery/imagenet_utils.py'>, 'decode_predictions': <function decode_predictions at 0x7f4336d71268>, 'preprocess_input': <function preprocess_input at 0x7f4336d711e0>, 'WEIGHTS_PATH': 'https://github.com/fchollet/deep-learning-models/releases/download/v0.2/resnet50_weights_tf_dim_ordering_tf_kernels.h5', 'WEIGHTS_PATH_NO_TOP': 'https://github.com/fchollet/deep-learning-models/releases/download/v0.2/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5', 'identity_block': <function identity_block at 0x7f4336d6ed08>, 'conv_block': <function conv_block at 0x7f4336d71378>, 'ResNet50': <function ResNet50 at 0x7f4336d71400>, '_i3': "img_rows, img_cols, img_chns = 32, 32, 3\noriginal_img_size = (img_rows, img_cols, img_chns)\nnum_classes = 10\nlearning_rate = float(os.environ.get('LEARNING_RATE', 0.001))\ndecay = float(os.environ.get('DECAY', 0.0))\nbatch_size = int(os.environ.get('BATCH_SIZE', 250))\nepochs = int(os.environ.get('EPOCHS', 100))\nrun_num = int(os.environ.get('RUN_NUM', 0))\nuse_preprocessing = int(os.environ.get('USE_PREPROCESSING', 1))\n\nfile_prefix = 'results_cifar10_preproc_%d_run_%d_' % (use_preprocessing, run_num)", 'img_rows': 32, 'img_cols': 32, 'img_chns': 3, 'original_img_size': (32, 32, 3), 'num_classes': 10, 'learning_rate': 0.001, 'decay': 0.0, 'batch_size': 250, 'epochs': 100, 'run_num': 2, 'use_preprocessing': 0, 'file_prefix': 'results_cifar10_preproc_0_run_2_', '_i4': '(X_train_raw, y_train_raw), (X_test, y_test) = cifar10.load_data()\nX_train_raw = X_train_raw / 255.\ny_train_raw = keras.utils.to_categorical(y_train_raw, 10)\nX_test = X_test / 255.\ny_test = keras.utils.to_categorical(y_test, 10)\n\nvalidation_index = int(len(X_train_raw) * 0.85)\nX_validation, y_validation = X_train_raw[validation_index:], y_train_raw[validation_index:]\nX_train, y_train = X_train_raw[:validation_index], y_train_raw[:validation_index]\n\nprint("raw", len(X_train_raw), len(y_train_raw))\nprint("validation", len(X_validation), len(y_validation))\nprint("train", len(X_train), len(y_train))\nprint("test", len(X_test), len(y_test))', 'X_train_raw': array([[[[0.23137255, 0.24313725, 0.24705882],
         [0.16862745, 0.18039216, 0.17647059],
         [0.19607843, 0.18823529, 0.16862745],
         ...,
         [0.61960784, 0.51764706, 0.42352941],
         [0.59607843, 0.49019608, 0.4       ],
         [0.58039216, 0.48627451, 0.40392157]],

        [[0.0627451 , 0.07843137, 0.07843137],
         [0.        , 0.        , 0.        ],
         [0.07058824, 0.03137255, 0.        ],
         ...,
         [0.48235294, 0.34509804, 0.21568627],
         [0.46666667, 0.3254902 , 0.19607843],
         [0.47843137, 0.34117647, 0.22352941]],

        [[0.09803922, 0.09411765, 0.08235294],
         [0.0627451 , 0.02745098, 0.        ],
         [0.19215686, 0.10588235, 0.03137255],
         ...,
         [0.4627451 , 0.32941176, 0.19607843],
         [0.47058824, 0.32941176, 0.19607843],
         [0.42745098, 0.28627451, 0.16470588]],

        ...,

        [[0.81568627, 0.66666667, 0.37647059],
         [0.78823529, 0.6       , 0.13333333],
         [0.77647059, 0.63137255, 0.10196078],
         ...,
         [0.62745098, 0.52156863, 0.2745098 ],
         [0.21960784, 0.12156863, 0.02745098],
         [0.20784314, 0.13333333, 0.07843137]],

        [[0.70588235, 0.54509804, 0.37647059],
         [0.67843137, 0.48235294, 0.16470588],
         [0.72941176, 0.56470588, 0.11764706],
         ...,
         [0.72156863, 0.58039216, 0.36862745],
         [0.38039216, 0.24313725, 0.13333333],
         [0.3254902 , 0.20784314, 0.13333333]],

        [[0.69411765, 0.56470588, 0.45490196],
         [0.65882353, 0.50588235, 0.36862745],
         [0.70196078, 0.55686275, 0.34117647],
         ...,
         [0.84705882, 0.72156863, 0.54901961],
         [0.59215686, 0.4627451 , 0.32941176],
         [0.48235294, 0.36078431, 0.28235294]]],


       [[[0.60392157, 0.69411765, 0.73333333],
         [0.49411765, 0.5372549 , 0.53333333],
         [0.41176471, 0.40784314, 0.37254902],
         ...,
         [0.35686275, 0.37254902, 0.27843137],
         [0.34117647, 0.35294118, 0.27843137],
         [0.30980392, 0.31764706, 0.2745098 ]],

        [[0.54901961, 0.62745098, 0.6627451 ],
         [0.56862745, 0.6       , 0.60392157],
         [0.49019608, 0.49019608, 0.4627451 ],
         ...,
         [0.37647059, 0.38823529, 0.30588235],
         [0.30196078, 0.31372549, 0.24313725],
         [0.27843137, 0.28627451, 0.23921569]],

        [[0.54901961, 0.60784314, 0.64313725],
         [0.54509804, 0.57254902, 0.58431373],
         [0.45098039, 0.45098039, 0.43921569],
         ...,
         [0.30980392, 0.32156863, 0.25098039],
         [0.26666667, 0.2745098 , 0.21568627],
         [0.2627451 , 0.27058824, 0.21568627]],

        ...,

        [[0.68627451, 0.65490196, 0.65098039],
         [0.61176471, 0.60392157, 0.62745098],
         [0.60392157, 0.62745098, 0.66666667],
         ...,
         [0.16470588, 0.13333333, 0.14117647],
         [0.23921569, 0.20784314, 0.22352941],
         [0.36470588, 0.3254902 , 0.35686275]],

        [[0.64705882, 0.60392157, 0.50196078],
         [0.61176471, 0.59607843, 0.50980392],
         [0.62352941, 0.63137255, 0.55686275],
         ...,
         [0.40392157, 0.36470588, 0.37647059],
         [0.48235294, 0.44705882, 0.47058824],
         [0.51372549, 0.4745098 , 0.51372549]],

        [[0.63921569, 0.58039216, 0.47058824],
         [0.61960784, 0.58039216, 0.47843137],
         [0.63921569, 0.61176471, 0.52156863],
         ...,
         [0.56078431, 0.52156863, 0.54509804],
         [0.56078431, 0.5254902 , 0.55686275],
         [0.56078431, 0.52156863, 0.56470588]]],


       [[[1.        , 1.        , 1.        ],
         [0.99215686, 0.99215686, 0.99215686],
         [0.99215686, 0.99215686, 0.99215686],
         ...,
         [0.99215686, 0.99215686, 0.99215686],
         [0.99215686, 0.99215686, 0.99215686],
         [0.99215686, 0.99215686, 0.99215686]],

        [[1.        , 1.        , 1.        ],
         [1.        , 1.        , 1.        ],
         [1.        , 1.        , 1.        ],
         ...,
         [1.        , 1.        , 1.        ],
         [1.        , 1.        , 1.        ],
         [1.        , 1.        , 1.        ]],

        [[1.        , 1.        , 1.        ],
         [0.99607843, 0.99607843, 0.99607843],
         [0.99607843, 0.99607843, 0.99607843],
         ...,
         [0.99607843, 0.99607843, 0.99607843],
         [0.99607843, 0.99607843, 0.99607843],
         [0.99607843, 0.99607843, 0.99607843]],

        ...,

        [[0.44313725, 0.47058824, 0.43921569],
         [0.43529412, 0.4627451 , 0.43529412],
         [0.41176471, 0.43921569, 0.41568627],
         ...,
         [0.28235294, 0.31764706, 0.31372549],
         [0.28235294, 0.31372549, 0.30980392],
         [0.28235294, 0.31372549, 0.30980392]],

        [[0.43529412, 0.4627451 , 0.43137255],
         [0.40784314, 0.43529412, 0.40784314],
         [0.38823529, 0.41568627, 0.38431373],
         ...,
         [0.26666667, 0.29411765, 0.28627451],
         [0.2745098 , 0.29803922, 0.29411765],
         [0.30588235, 0.32941176, 0.32156863]],

        [[0.41568627, 0.44313725, 0.41176471],
         [0.38823529, 0.41568627, 0.38431373],
         [0.37254902, 0.4       , 0.36862745],
         ...,
         [0.30588235, 0.33333333, 0.3254902 ],
         [0.30980392, 0.33333333, 0.3254902 ],
         [0.31372549, 0.3372549 , 0.32941176]]],


       ...,


       [[[0.1372549 , 0.69803922, 0.92156863],
         [0.15686275, 0.69019608, 0.9372549 ],
         [0.16470588, 0.69019608, 0.94509804],
         ...,
         [0.38823529, 0.69411765, 0.85882353],
         [0.30980392, 0.57647059, 0.77254902],
         [0.34901961, 0.58039216, 0.74117647]],

        [[0.22352941, 0.71372549, 0.91764706],
         [0.17254902, 0.72156863, 0.98039216],
         [0.19607843, 0.71764706, 0.94117647],
         ...,
         [0.61176471, 0.71372549, 0.78431373],
         [0.55294118, 0.69411765, 0.80784314],
         [0.45490196, 0.58431373, 0.68627451]],

        [[0.38431373, 0.77254902, 0.92941176],
         [0.25098039, 0.74117647, 0.98823529],
         [0.27058824, 0.75294118, 0.96078431],
         ...,
         [0.7372549 , 0.76470588, 0.80784314],
         [0.46666667, 0.52941176, 0.57647059],
         [0.23921569, 0.30980392, 0.35294118]],

        ...,

        [[0.28627451, 0.30980392, 0.30196078],
         [0.20784314, 0.24705882, 0.26666667],
         [0.21176471, 0.26666667, 0.31372549],
         ...,
         [0.06666667, 0.15686275, 0.25098039],
         [0.08235294, 0.14117647, 0.2       ],
         [0.12941176, 0.18823529, 0.19215686]],

        [[0.23921569, 0.26666667, 0.29411765],
         [0.21568627, 0.2745098 , 0.3372549 ],
         [0.22352941, 0.30980392, 0.40392157],
         ...,
         [0.09411765, 0.18823529, 0.28235294],
         [0.06666667, 0.1372549 , 0.20784314],
         [0.02745098, 0.09019608, 0.1254902 ]],

        [[0.17254902, 0.21960784, 0.28627451],
         [0.18039216, 0.25882353, 0.34509804],
         [0.19215686, 0.30196078, 0.41176471],
         ...,
         [0.10588235, 0.20392157, 0.30196078],
         [0.08235294, 0.16862745, 0.25882353],
         [0.04705882, 0.12156863, 0.19607843]]],


       [[[0.74117647, 0.82745098, 0.94117647],
         [0.72941176, 0.81568627, 0.9254902 ],
         [0.7254902 , 0.81176471, 0.92156863],
         ...,
         [0.68627451, 0.76470588, 0.87843137],
         [0.6745098 , 0.76078431, 0.87058824],
         [0.6627451 , 0.76078431, 0.8627451 ]],

        [[0.76078431, 0.82352941, 0.9372549 ],
         [0.74901961, 0.81176471, 0.9254902 ],
         [0.74509804, 0.80784314, 0.92156863],
         ...,
         [0.67843137, 0.75294118, 0.8627451 ],
         [0.67058824, 0.74901961, 0.85490196],
         [0.65490196, 0.74509804, 0.84705882]],

        [[0.81568627, 0.85882353, 0.95686275],
         [0.80392157, 0.84705882, 0.94117647],
         [0.8       , 0.84313725, 0.9372549 ],
         ...,
         [0.68627451, 0.74901961, 0.85098039],
         [0.6745098 , 0.74509804, 0.84705882],
         [0.6627451 , 0.74901961, 0.84313725]],

        ...,

        [[0.81176471, 0.78039216, 0.70980392],
         [0.79607843, 0.76470588, 0.68627451],
         [0.79607843, 0.76862745, 0.67843137],
         ...,
         [0.52941176, 0.51764706, 0.49803922],
         [0.63529412, 0.61960784, 0.58823529],
         [0.65882353, 0.63921569, 0.59215686]],

        [[0.77647059, 0.74509804, 0.66666667],
         [0.74117647, 0.70980392, 0.62352941],
         [0.70588235, 0.6745098 , 0.57647059],
         ...,
         [0.69803922, 0.67058824, 0.62745098],
         [0.68627451, 0.6627451 , 0.61176471],
         [0.68627451, 0.6627451 , 0.60392157]],

        [[0.77647059, 0.74117647, 0.67843137],
         [0.74117647, 0.70980392, 0.63529412],
         [0.69803922, 0.66666667, 0.58431373],
         ...,
         [0.76470588, 0.72156863, 0.6627451 ],
         [0.76862745, 0.74117647, 0.67058824],
         [0.76470588, 0.74509804, 0.67058824]]],


       [[[0.89803922, 0.89803922, 0.9372549 ],
         [0.9254902 , 0.92941176, 0.96862745],
         [0.91764706, 0.9254902 , 0.96862745],
         ...,
         [0.85098039, 0.85882353, 0.91372549],
         [0.86666667, 0.8745098 , 0.91764706],
         [0.87058824, 0.8745098 , 0.91372549]],

        [[0.87058824, 0.86666667, 0.89803922],
         [0.9372549 , 0.9372549 , 0.97647059],
         [0.91372549, 0.91764706, 0.96470588],
         ...,
         [0.8745098 , 0.8745098 , 0.9254902 ],
         [0.89019608, 0.89411765, 0.93333333],
         [0.82352941, 0.82745098, 0.8627451 ]],

        [[0.83529412, 0.80784314, 0.82745098],
         [0.91764706, 0.90980392, 0.9372549 ],
         [0.90588235, 0.91372549, 0.95686275],
         ...,
         [0.8627451 , 0.8627451 , 0.90980392],
         [0.8627451 , 0.85882353, 0.90980392],
         [0.79215686, 0.79607843, 0.84313725]],

        ...,

        [[0.58823529, 0.56078431, 0.52941176],
         [0.54901961, 0.52941176, 0.49803922],
         [0.51764706, 0.49803922, 0.47058824],
         ...,
         [0.87843137, 0.87058824, 0.85490196],
         [0.90196078, 0.89411765, 0.88235294],
         [0.94509804, 0.94509804, 0.93333333]],

        [[0.5372549 , 0.51764706, 0.49411765],
         [0.50980392, 0.49803922, 0.47058824],
         [0.49019608, 0.4745098 , 0.45098039],
         ...,
         [0.70980392, 0.70588235, 0.69803922],
         [0.79215686, 0.78823529, 0.77647059],
         [0.83137255, 0.82745098, 0.81176471]],

        [[0.47843137, 0.46666667, 0.44705882],
         [0.4627451 , 0.45490196, 0.43137255],
         [0.47058824, 0.45490196, 0.43529412],
         ...,
         [0.70196078, 0.69411765, 0.67843137],
         [0.64313725, 0.64313725, 0.63529412],
         [0.63921569, 0.63921569, 0.63137255]]]]), 'y_train_raw': array([[0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 1.],
       [0., 0., 0., ..., 0., 0., 1.],
       ...,
       [0., 0., 0., ..., 0., 0., 1.],
       [0., 1., 0., ..., 0., 0., 0.],
       [0., 1., 0., ..., 0., 0., 0.]]), 'X_test': array([[[[0.61960784, 0.43921569, 0.19215686],
         [0.62352941, 0.43529412, 0.18431373],
         [0.64705882, 0.45490196, 0.2       ],
         ...,
         [0.5372549 , 0.37254902, 0.14117647],
         [0.49411765, 0.35686275, 0.14117647],
         [0.45490196, 0.33333333, 0.12941176]],

        [[0.59607843, 0.43921569, 0.2       ],
         [0.59215686, 0.43137255, 0.15686275],
         [0.62352941, 0.44705882, 0.17647059],
         ...,
         [0.53333333, 0.37254902, 0.12156863],
         [0.49019608, 0.35686275, 0.1254902 ],
         [0.46666667, 0.34509804, 0.13333333]],

        [[0.59215686, 0.43137255, 0.18431373],
         [0.59215686, 0.42745098, 0.12941176],
         [0.61960784, 0.43529412, 0.14117647],
         ...,
         [0.54509804, 0.38431373, 0.13333333],
         [0.50980392, 0.37254902, 0.13333333],
         [0.47058824, 0.34901961, 0.12941176]],

        ...,

        [[0.26666667, 0.48627451, 0.69411765],
         [0.16470588, 0.39215686, 0.58039216],
         [0.12156863, 0.34509804, 0.5372549 ],
         ...,
         [0.14901961, 0.38039216, 0.57254902],
         [0.05098039, 0.25098039, 0.42352941],
         [0.15686275, 0.33333333, 0.49803922]],

        [[0.23921569, 0.45490196, 0.65882353],
         [0.19215686, 0.4       , 0.58039216],
         [0.1372549 , 0.33333333, 0.51764706],
         ...,
         [0.10196078, 0.32156863, 0.50980392],
         [0.11372549, 0.32156863, 0.49411765],
         [0.07843137, 0.25098039, 0.41960784]],

        [[0.21176471, 0.41960784, 0.62745098],
         [0.21960784, 0.41176471, 0.58431373],
         [0.17647059, 0.34901961, 0.51764706],
         ...,
         [0.09411765, 0.30196078, 0.48627451],
         [0.13333333, 0.32941176, 0.50588235],
         [0.08235294, 0.2627451 , 0.43137255]]],


       [[[0.92156863, 0.92156863, 0.92156863],
         [0.90588235, 0.90588235, 0.90588235],
         [0.90980392, 0.90980392, 0.90980392],
         ...,
         [0.91372549, 0.91372549, 0.91372549],
         [0.91372549, 0.91372549, 0.91372549],
         [0.90980392, 0.90980392, 0.90980392]],

        [[0.93333333, 0.93333333, 0.93333333],
         [0.92156863, 0.92156863, 0.92156863],
         [0.92156863, 0.92156863, 0.92156863],
         ...,
         [0.9254902 , 0.9254902 , 0.9254902 ],
         [0.9254902 , 0.9254902 , 0.9254902 ],
         [0.92156863, 0.92156863, 0.92156863]],

        [[0.92941176, 0.92941176, 0.92941176],
         [0.91764706, 0.91764706, 0.91764706],
         [0.91764706, 0.91764706, 0.91764706],
         ...,
         [0.92156863, 0.92156863, 0.92156863],
         [0.92156863, 0.92156863, 0.92156863],
         [0.91764706, 0.91764706, 0.91764706]],

        ...,

        [[0.34117647, 0.38823529, 0.34901961],
         [0.16862745, 0.2       , 0.14509804],
         [0.0745098 , 0.09019608, 0.04313725],
         ...,
         [0.6627451 , 0.72156863, 0.70196078],
         [0.71372549, 0.77254902, 0.75686275],
         [0.7372549 , 0.79215686, 0.78823529]],

        [[0.32156863, 0.37647059, 0.32156863],
         [0.18039216, 0.22352941, 0.14117647],
         [0.14117647, 0.17254902, 0.08627451],
         ...,
         [0.68235294, 0.74117647, 0.71764706],
         [0.7254902 , 0.78431373, 0.76862745],
         [0.73333333, 0.79215686, 0.78431373]],

        [[0.33333333, 0.39607843, 0.3254902 ],
         [0.24313725, 0.29411765, 0.18823529],
         [0.22745098, 0.2627451 , 0.14901961],
         ...,
         [0.65882353, 0.71764706, 0.69803922],
         [0.70588235, 0.76470588, 0.74901961],
         [0.72941176, 0.78431373, 0.78039216]]],


       [[[0.61960784, 0.74509804, 0.87058824],
         [0.61960784, 0.73333333, 0.85490196],
         [0.54509804, 0.65098039, 0.76078431],
         ...,
         [0.89411765, 0.90588235, 0.91764706],
         [0.92941176, 0.9372549 , 0.95294118],
         [0.93333333, 0.94509804, 0.96470588]],

        [[0.66666667, 0.78431373, 0.89803922],
         [0.6745098 , 0.78039216, 0.88627451],
         [0.59215686, 0.69019608, 0.78823529],
         ...,
         [0.90980392, 0.90980392, 0.9254902 ],
         [0.96470588, 0.96470588, 0.98039216],
         [0.96470588, 0.96862745, 0.98431373]],

        [[0.68235294, 0.78823529, 0.88235294],
         [0.69019608, 0.78431373, 0.87058824],
         [0.61568627, 0.70196078, 0.78039216],
         ...,
         [0.90196078, 0.89803922, 0.90980392],
         [0.98039216, 0.97647059, 0.98431373],
         [0.96078431, 0.95686275, 0.96862745]],

        ...,

        [[0.12156863, 0.15686275, 0.17647059],
         [0.11764706, 0.15294118, 0.17254902],
         [0.10196078, 0.1372549 , 0.15686275],
         ...,
         [0.14509804, 0.15686275, 0.18039216],
         [0.03529412, 0.05098039, 0.05490196],
         [0.01568627, 0.02745098, 0.01960784]],

        [[0.09019608, 0.13333333, 0.15294118],
         [0.10588235, 0.14901961, 0.16862745],
         [0.09803922, 0.14117647, 0.16078431],
         ...,
         [0.0745098 , 0.07843137, 0.09411765],
         [0.01568627, 0.02352941, 0.01176471],
         [0.01960784, 0.02745098, 0.01176471]],

        [[0.10980392, 0.16078431, 0.18431373],
         [0.11764706, 0.16862745, 0.19607843],
         [0.1254902 , 0.17647059, 0.20392157],
         ...,
         [0.01960784, 0.02352941, 0.03137255],
         [0.01568627, 0.01960784, 0.01176471],
         [0.02745098, 0.03137255, 0.02745098]]],


       ...,


       [[[0.07843137, 0.05882353, 0.04705882],
         [0.0745098 , 0.05490196, 0.04313725],
         [0.05882353, 0.05490196, 0.04313725],
         ...,
         [0.03921569, 0.03529412, 0.02745098],
         [0.04705882, 0.04313725, 0.03529412],
         [0.05098039, 0.04705882, 0.03921569]],

        [[0.08235294, 0.0627451 , 0.05098039],
         [0.07843137, 0.0627451 , 0.05098039],
         [0.07058824, 0.06666667, 0.04705882],
         ...,
         [0.03921569, 0.03529412, 0.02745098],
         [0.03921569, 0.03529412, 0.02745098],
         [0.04705882, 0.04313725, 0.03529412]],

        [[0.08235294, 0.0627451 , 0.05098039],
         [0.08235294, 0.06666667, 0.04705882],
         [0.07843137, 0.07058824, 0.04313725],
         ...,
         [0.04705882, 0.04313725, 0.03529412],
         [0.04705882, 0.04313725, 0.03529412],
         [0.05098039, 0.04705882, 0.03921569]],

        ...,

        [[0.12941176, 0.09803922, 0.05098039],
         [0.13333333, 0.10196078, 0.05882353],
         [0.13333333, 0.10196078, 0.05882353],
         ...,
         [0.10980392, 0.09803922, 0.20392157],
         [0.11372549, 0.09803922, 0.22745098],
         [0.09019608, 0.07843137, 0.16470588]],

        [[0.12941176, 0.09803922, 0.05490196],
         [0.13333333, 0.10196078, 0.05882353],
         [0.13333333, 0.10196078, 0.05882353],
         ...,
         [0.10588235, 0.09411765, 0.20392157],
         [0.10588235, 0.09411765, 0.21960784],
         [0.09803922, 0.08627451, 0.18431373]],

        [[0.12156863, 0.09019608, 0.04705882],
         [0.1254902 , 0.09411765, 0.05098039],
         [0.12941176, 0.09803922, 0.05490196],
         ...,
         [0.09411765, 0.09019608, 0.19607843],
         [0.10196078, 0.09019608, 0.20784314],
         [0.09803922, 0.07843137, 0.18431373]]],


       [[[0.09803922, 0.15686275, 0.04705882],
         [0.05882353, 0.14117647, 0.01176471],
         [0.09019608, 0.16078431, 0.07058824],
         ...,
         [0.23921569, 0.32156863, 0.30588235],
         [0.36078431, 0.44313725, 0.43921569],
         [0.29411765, 0.34901961, 0.36078431]],

        [[0.04705882, 0.09803922, 0.02352941],
         [0.07843137, 0.14509804, 0.02745098],
         [0.09411765, 0.14117647, 0.05882353],
         ...,
         [0.45098039, 0.5254902 , 0.54117647],
         [0.58431373, 0.65882353, 0.69411765],
         [0.40784314, 0.45882353, 0.51372549]],

        [[0.04705882, 0.09803922, 0.04313725],
         [0.05882353, 0.11372549, 0.02352941],
         [0.13333333, 0.15686275, 0.09411765],
         ...,
         [0.60392157, 0.6745098 , 0.71372549],
         [0.61568627, 0.68627451, 0.75294118],
         [0.45490196, 0.50588235, 0.59215686]],

        ...,

        [[0.39215686, 0.50588235, 0.31764706],
         [0.40392157, 0.51764706, 0.32941176],
         [0.40784314, 0.5254902 , 0.3372549 ],
         ...,
         [0.38039216, 0.50196078, 0.32941176],
         [0.38431373, 0.49411765, 0.32941176],
         [0.35686275, 0.4745098 , 0.30980392]],

        [[0.40392157, 0.51764706, 0.3254902 ],
         [0.40784314, 0.51372549, 0.3254902 ],
         [0.41960784, 0.52941176, 0.34117647],
         ...,
         [0.39607843, 0.51764706, 0.34117647],
         [0.38823529, 0.49803922, 0.32941176],
         [0.36078431, 0.4745098 , 0.30980392]],

        [[0.37254902, 0.49411765, 0.30588235],
         [0.37254902, 0.48235294, 0.29803922],
         [0.39607843, 0.50196078, 0.31764706],
         ...,
         [0.36470588, 0.48627451, 0.31372549],
         [0.37254902, 0.48235294, 0.31764706],
         [0.36078431, 0.47058824, 0.31372549]]],


       [[[0.28627451, 0.30588235, 0.29411765],
         [0.38431373, 0.40392157, 0.44313725],
         [0.38823529, 0.41568627, 0.44705882],
         ...,
         [0.52941176, 0.58823529, 0.59607843],
         [0.52941176, 0.58431373, 0.60392157],
         [0.79607843, 0.84313725, 0.8745098 ]],

        [[0.27058824, 0.28627451, 0.2745098 ],
         [0.32941176, 0.34901961, 0.38039216],
         [0.26666667, 0.29411765, 0.31764706],
         ...,
         [0.33333333, 0.37254902, 0.34901961],
         [0.27843137, 0.32156863, 0.31372549],
         [0.47058824, 0.52156863, 0.52941176]],

        [[0.27058824, 0.28627451, 0.2745098 ],
         [0.35294118, 0.37254902, 0.39215686],
         [0.24313725, 0.27843137, 0.29019608],
         ...,
         [0.29019608, 0.31764706, 0.2745098 ],
         [0.20784314, 0.24313725, 0.21176471],
         [0.24313725, 0.29019608, 0.27058824]],

        ...,

        [[0.48235294, 0.50196078, 0.37647059],
         [0.51764706, 0.51764706, 0.4       ],
         [0.50588235, 0.50196078, 0.39215686],
         ...,
         [0.42352941, 0.41960784, 0.34509804],
         [0.24313725, 0.23529412, 0.21568627],
         [0.10588235, 0.10588235, 0.10980392]],

        [[0.45098039, 0.4745098 , 0.35686275],
         [0.48235294, 0.48627451, 0.37254902],
         [0.50588235, 0.49411765, 0.38823529],
         ...,
         [0.45098039, 0.45490196, 0.36862745],
         [0.25882353, 0.25490196, 0.23137255],
         [0.10588235, 0.10588235, 0.10588235]],

        [[0.45490196, 0.47058824, 0.35294118],
         [0.4745098 , 0.47843137, 0.36862745],
         [0.50588235, 0.50196078, 0.39607843],
         ...,
         [0.45490196, 0.45098039, 0.36862745],
         [0.26666667, 0.25490196, 0.22745098],
         [0.10588235, 0.10196078, 0.10196078]]]]), 'y_test': array([[0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 1., 0.],
       [0., 0., 0., ..., 0., 1., 0.],
       ...,
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 1., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 1., 0., 0.]]), 'validation_index': 42500, 'X_validation': array([[[[0.49803922, 0.56470588, 0.48627451],
         [0.36470588, 0.43529412, 0.34117647],
         [0.38039216, 0.4745098 , 0.36470588],
         ...,
         [0.52941176, 0.56862745, 0.5254902 ],
         [0.71764706, 0.73333333, 0.70196078],
         [0.83921569, 0.85882353, 0.82352941]],

        [[0.21960784, 0.33333333, 0.20784314],
         [0.02745098, 0.18039216, 0.00392157],
         [0.02745098, 0.21568627, 0.02745098],
         ...,
         [0.6       , 0.65098039, 0.6       ],
         [0.51372549, 0.56470588, 0.51372549],
         [0.61568627, 0.6745098 , 0.61960784]],

        [[0.23137255, 0.31764706, 0.21960784],
         [0.03921569, 0.19607843, 0.03137255],
         [0.07058824, 0.19607843, 0.05098039],
         ...,
         [0.84313725, 0.85882353, 0.85490196],
         [0.84313725, 0.86666667, 0.85098039],
         [0.68235294, 0.73333333, 0.69411765]],

        ...,

        [[0.20784314, 0.40784314, 0.22352941],
         [0.01568627, 0.2745098 , 0.02352941],
         [0.04313725, 0.28627451, 0.05490196],
         ...,
         [0.45490196, 0.4745098 , 0.32156863],
         [0.36078431, 0.41568627, 0.27058824],
         [0.14117647, 0.34117647, 0.12941176]],

        [[0.16862745, 0.39215686, 0.17254902],
         [0.        , 0.25098039, 0.        ],
         [0.        , 0.28235294, 0.        ],
         ...,
         [0.28627451, 0.4       , 0.20784314],
         [0.10196078, 0.29411765, 0.07843137],
         [0.03137255, 0.29803922, 0.05098039]],

        [[0.45098039, 0.6       , 0.44313725],
         [0.29803922, 0.50588235, 0.29803922],
         [0.31372549, 0.51372549, 0.31764706],
         ...,
         [0.33333333, 0.50196078, 0.32941176],
         [0.31372549, 0.50980392, 0.30980392],
         [0.34117647, 0.54509804, 0.34901961]]],


       [[[0.60392157, 0.43137255, 0.44705882],
         [0.6745098 , 0.48627451, 0.49803922],
         [0.71372549, 0.5372549 , 0.5372549 ],
         ...,
         [0.74117647, 0.57647059, 0.58431373],
         [0.76078431, 0.55686275, 0.57254902],
         [0.72941176, 0.50588235, 0.51372549]],

        [[0.62745098, 0.45098039, 0.45490196],
         [0.64313725, 0.45882353, 0.46666667],
         [0.69411765, 0.52941176, 0.52941176],
         ...,
         [0.69803922, 0.53333333, 0.54117647],
         [0.70196078, 0.50196078, 0.51764706],
         [0.69803922, 0.47843137, 0.48627451]],

        [[0.67058824, 0.49019608, 0.4745098 ],
         [0.67843137, 0.49803922, 0.49411765],
         [0.70980392, 0.56078431, 0.55294118],
         ...,
         [0.68627451, 0.5254902 , 0.5372549 ],
         [0.63137255, 0.43137255, 0.44705882],
         [0.6627451 , 0.44313725, 0.45490196]],

        ...,

        [[0.51764706, 0.3254902 , 0.27058824],
         [0.50980392, 0.31764706, 0.28235294],
         [0.51764706, 0.3254902 , 0.27843137],
         ...,
         [0.66666667, 0.42352941, 0.42745098],
         [0.66666667, 0.41960784, 0.44705882],
         [0.66666667, 0.41960784, 0.44313725]],

        [[0.5254902 , 0.31372549, 0.31372549],
         [0.52156863, 0.30980392, 0.33333333],
         [0.53333333, 0.32156863, 0.32941176],
         ...,
         [0.65490196, 0.41176471, 0.42745098],
         [0.65882353, 0.41176471, 0.43921569],
         [0.6627451 , 0.41960784, 0.43137255]],

        [[0.55294118, 0.33333333, 0.34509804],
         [0.55294118, 0.33333333, 0.36470588],
         [0.56078431, 0.34117647, 0.36078431],
         ...,
         [0.65098039, 0.40784314, 0.40784314],
         [0.65098039, 0.40784314, 0.41176471],
         [0.65098039, 0.41568627, 0.39215686]]],


       [[[0.10980392, 0.12941176, 0.14117647],
         [0.10588235, 0.1254902 , 0.1372549 ],
         [0.09411765, 0.11372549, 0.1254902 ],
         ...,
         [0.50980392, 0.57254902, 0.53333333],
         [0.17254902, 0.25098039, 0.1372549 ],
         [0.16862745, 0.25882353, 0.1372549 ]],

        [[0.10196078, 0.12156863, 0.13333333],
         [0.09803922, 0.11764706, 0.12941176],
         [0.10196078, 0.12156863, 0.13333333],
         ...,
         [0.44705882, 0.51372549, 0.44313725],
         [0.15686275, 0.23137255, 0.10980392],
         [0.11372549, 0.20784314, 0.06666667]],

        [[0.09803922, 0.11764706, 0.12941176],
         [0.09803922, 0.11764706, 0.12941176],
         [0.09803922, 0.11764706, 0.12941176],
         ...,
         [0.23921569, 0.31372549, 0.2       ],
         [0.14117647, 0.21960784, 0.07843137],
         [0.09019608, 0.18431373, 0.02745098]],

        ...,

        [[0.42745098, 0.42352941, 0.35686275],
         [0.14117647, 0.13333333, 0.10588235],
         [0.03529412, 0.01960784, 0.01960784],
         ...,
         [0.29019608, 0.36862745, 0.14117647],
         [0.27058824, 0.36078431, 0.11372549],
         [0.23921569, 0.3372549 , 0.10196078]],

        [[0.4745098 , 0.47058824, 0.41960784],
         [0.16078431, 0.15686275, 0.1254902 ],
         [0.26666667, 0.2627451 , 0.23529412],
         ...,
         [0.25098039, 0.3372549 , 0.12156863],
         [0.21568627, 0.31372549, 0.09803922],
         [0.21176471, 0.31764706, 0.09411765]],

        [[0.61960784, 0.6       , 0.52941176],
         [0.52156863, 0.51764706, 0.43529412],
         [0.52156863, 0.5254902 , 0.43529412],
         ...,
         [0.23137255, 0.32156863, 0.10980392],
         [0.21176471, 0.30588235, 0.09411765],
         [0.23529412, 0.3254902 , 0.10588235]]],


       ...,


       [[[0.1372549 , 0.69803922, 0.92156863],
         [0.15686275, 0.69019608, 0.9372549 ],
         [0.16470588, 0.69019608, 0.94509804],
         ...,
         [0.38823529, 0.69411765, 0.85882353],
         [0.30980392, 0.57647059, 0.77254902],
         [0.34901961, 0.58039216, 0.74117647]],

        [[0.22352941, 0.71372549, 0.91764706],
         [0.17254902, 0.72156863, 0.98039216],
         [0.19607843, 0.71764706, 0.94117647],
         ...,
         [0.61176471, 0.71372549, 0.78431373],
         [0.55294118, 0.69411765, 0.80784314],
         [0.45490196, 0.58431373, 0.68627451]],

        [[0.38431373, 0.77254902, 0.92941176],
         [0.25098039, 0.74117647, 0.98823529],
         [0.27058824, 0.75294118, 0.96078431],
         ...,
         [0.7372549 , 0.76470588, 0.80784314],
         [0.46666667, 0.52941176, 0.57647059],
         [0.23921569, 0.30980392, 0.35294118]],

        ...,

        [[0.28627451, 0.30980392, 0.30196078],
         [0.20784314, 0.24705882, 0.26666667],
         [0.21176471, 0.26666667, 0.31372549],
         ...,
         [0.06666667, 0.15686275, 0.25098039],
         [0.08235294, 0.14117647, 0.2       ],
         [0.12941176, 0.18823529, 0.19215686]],

        [[0.23921569, 0.26666667, 0.29411765],
         [0.21568627, 0.2745098 , 0.3372549 ],
         [0.22352941, 0.30980392, 0.40392157],
         ...,
         [0.09411765, 0.18823529, 0.28235294],
         [0.06666667, 0.1372549 , 0.20784314],
         [0.02745098, 0.09019608, 0.1254902 ]],

        [[0.17254902, 0.21960784, 0.28627451],
         [0.18039216, 0.25882353, 0.34509804],
         [0.19215686, 0.30196078, 0.41176471],
         ...,
         [0.10588235, 0.20392157, 0.30196078],
         [0.08235294, 0.16862745, 0.25882353],
         [0.04705882, 0.12156863, 0.19607843]]],


       [[[0.74117647, 0.82745098, 0.94117647],
         [0.72941176, 0.81568627, 0.9254902 ],
         [0.7254902 , 0.81176471, 0.92156863],
         ...,
         [0.68627451, 0.76470588, 0.87843137],
         [0.6745098 , 0.76078431, 0.87058824],
         [0.6627451 , 0.76078431, 0.8627451 ]],

        [[0.76078431, 0.82352941, 0.9372549 ],
         [0.74901961, 0.81176471, 0.9254902 ],
         [0.74509804, 0.80784314, 0.92156863],
         ...,
         [0.67843137, 0.75294118, 0.8627451 ],
         [0.67058824, 0.74901961, 0.85490196],
         [0.65490196, 0.74509804, 0.84705882]],

        [[0.81568627, 0.85882353, 0.95686275],
         [0.80392157, 0.84705882, 0.94117647],
         [0.8       , 0.84313725, 0.9372549 ],
         ...,
         [0.68627451, 0.74901961, 0.85098039],
         [0.6745098 , 0.74509804, 0.84705882],
         [0.6627451 , 0.74901961, 0.84313725]],

        ...,

        [[0.81176471, 0.78039216, 0.70980392],
         [0.79607843, 0.76470588, 0.68627451],
         [0.79607843, 0.76862745, 0.67843137],
         ...,
         [0.52941176, 0.51764706, 0.49803922],
         [0.63529412, 0.61960784, 0.58823529],
         [0.65882353, 0.63921569, 0.59215686]],

        [[0.77647059, 0.74509804, 0.66666667],
         [0.74117647, 0.70980392, 0.62352941],
         [0.70588235, 0.6745098 , 0.57647059],
         ...,
         [0.69803922, 0.67058824, 0.62745098],
         [0.68627451, 0.6627451 , 0.61176471],
         [0.68627451, 0.6627451 , 0.60392157]],

        [[0.77647059, 0.74117647, 0.67843137],
         [0.74117647, 0.70980392, 0.63529412],
         [0.69803922, 0.66666667, 0.58431373],
         ...,
         [0.76470588, 0.72156863, 0.6627451 ],
         [0.76862745, 0.74117647, 0.67058824],
         [0.76470588, 0.74509804, 0.67058824]]],


       [[[0.89803922, 0.89803922, 0.9372549 ],
         [0.9254902 , 0.92941176, 0.96862745],
         [0.91764706, 0.9254902 , 0.96862745],
         ...,
         [0.85098039, 0.85882353, 0.91372549],
         [0.86666667, 0.8745098 , 0.91764706],
         [0.87058824, 0.8745098 , 0.91372549]],

        [[0.87058824, 0.86666667, 0.89803922],
         [0.9372549 , 0.9372549 , 0.97647059],
         [0.91372549, 0.91764706, 0.96470588],
         ...,
         [0.8745098 , 0.8745098 , 0.9254902 ],
         [0.89019608, 0.89411765, 0.93333333],
         [0.82352941, 0.82745098, 0.8627451 ]],

        [[0.83529412, 0.80784314, 0.82745098],
         [0.91764706, 0.90980392, 0.9372549 ],
         [0.90588235, 0.91372549, 0.95686275],
         ...,
         [0.8627451 , 0.8627451 , 0.90980392],
         [0.8627451 , 0.85882353, 0.90980392],
         [0.79215686, 0.79607843, 0.84313725]],

        ...,

        [[0.58823529, 0.56078431, 0.52941176],
         [0.54901961, 0.52941176, 0.49803922],
         [0.51764706, 0.49803922, 0.47058824],
         ...,
         [0.87843137, 0.87058824, 0.85490196],
         [0.90196078, 0.89411765, 0.88235294],
         [0.94509804, 0.94509804, 0.93333333]],

        [[0.5372549 , 0.51764706, 0.49411765],
         [0.50980392, 0.49803922, 0.47058824],
         [0.49019608, 0.4745098 , 0.45098039],
         ...,
         [0.70980392, 0.70588235, 0.69803922],
         [0.79215686, 0.78823529, 0.77647059],
         [0.83137255, 0.82745098, 0.81176471]],

        [[0.47843137, 0.46666667, 0.44705882],
         [0.4627451 , 0.45490196, 0.43137255],
         [0.47058824, 0.45490196, 0.43529412],
         ...,
         [0.70196078, 0.69411765, 0.67843137],
         [0.64313725, 0.64313725, 0.63529412],
         [0.63921569, 0.63921569, 0.63137255]]]]), 'y_validation': array([[0., 0., 0., ..., 1., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 1., 0.],
       ...,
       [0., 0., 0., ..., 0., 0., 1.],
       [0., 1., 0., ..., 0., 0., 0.],
       [0., 1., 0., ..., 0., 0., 0.]]), 'X_train': array([[[[0.23137255, 0.24313725, 0.24705882],
         [0.16862745, 0.18039216, 0.17647059],
         [0.19607843, 0.18823529, 0.16862745],
         ...,
         [0.61960784, 0.51764706, 0.42352941],
         [0.59607843, 0.49019608, 0.4       ],
         [0.58039216, 0.48627451, 0.40392157]],

        [[0.0627451 , 0.07843137, 0.07843137],
         [0.        , 0.        , 0.        ],
         [0.07058824, 0.03137255, 0.        ],
         ...,
         [0.48235294, 0.34509804, 0.21568627],
         [0.46666667, 0.3254902 , 0.19607843],
         [0.47843137, 0.34117647, 0.22352941]],

        [[0.09803922, 0.09411765, 0.08235294],
         [0.0627451 , 0.02745098, 0.        ],
         [0.19215686, 0.10588235, 0.03137255],
         ...,
         [0.4627451 , 0.32941176, 0.19607843],
         [0.47058824, 0.32941176, 0.19607843],
         [0.42745098, 0.28627451, 0.16470588]],

        ...,

        [[0.81568627, 0.66666667, 0.37647059],
         [0.78823529, 0.6       , 0.13333333],
         [0.77647059, 0.63137255, 0.10196078],
         ...,
         [0.62745098, 0.52156863, 0.2745098 ],
         [0.21960784, 0.12156863, 0.02745098],
         [0.20784314, 0.13333333, 0.07843137]],

        [[0.70588235, 0.54509804, 0.37647059],
         [0.67843137, 0.48235294, 0.16470588],
         [0.72941176, 0.56470588, 0.11764706],
         ...,
         [0.72156863, 0.58039216, 0.36862745],
         [0.38039216, 0.24313725, 0.13333333],
         [0.3254902 , 0.20784314, 0.13333333]],

        [[0.69411765, 0.56470588, 0.45490196],
         [0.65882353, 0.50588235, 0.36862745],
         [0.70196078, 0.55686275, 0.34117647],
         ...,
         [0.84705882, 0.72156863, 0.54901961],
         [0.59215686, 0.4627451 , 0.32941176],
         [0.48235294, 0.36078431, 0.28235294]]],


       [[[0.60392157, 0.69411765, 0.73333333],
         [0.49411765, 0.5372549 , 0.53333333],
         [0.41176471, 0.40784314, 0.37254902],
         ...,
         [0.35686275, 0.37254902, 0.27843137],
         [0.34117647, 0.35294118, 0.27843137],
         [0.30980392, 0.31764706, 0.2745098 ]],

        [[0.54901961, 0.62745098, 0.6627451 ],
         [0.56862745, 0.6       , 0.60392157],
         [0.49019608, 0.49019608, 0.4627451 ],
         ...,
         [0.37647059, 0.38823529, 0.30588235],
         [0.30196078, 0.31372549, 0.24313725],
         [0.27843137, 0.28627451, 0.23921569]],

        [[0.54901961, 0.60784314, 0.64313725],
         [0.54509804, 0.57254902, 0.58431373],
         [0.45098039, 0.45098039, 0.43921569],
         ...,
         [0.30980392, 0.32156863, 0.25098039],
         [0.26666667, 0.2745098 , 0.21568627],
         [0.2627451 , 0.27058824, 0.21568627]],

        ...,

        [[0.68627451, 0.65490196, 0.65098039],
         [0.61176471, 0.60392157, 0.62745098],
         [0.60392157, 0.62745098, 0.66666667],
         ...,
         [0.16470588, 0.13333333, 0.14117647],
         [0.23921569, 0.20784314, 0.22352941],
         [0.36470588, 0.3254902 , 0.35686275]],

        [[0.64705882, 0.60392157, 0.50196078],
         [0.61176471, 0.59607843, 0.50980392],
         [0.62352941, 0.63137255, 0.55686275],
         ...,
         [0.40392157, 0.36470588, 0.37647059],
         [0.48235294, 0.44705882, 0.47058824],
         [0.51372549, 0.4745098 , 0.51372549]],

        [[0.63921569, 0.58039216, 0.47058824],
         [0.61960784, 0.58039216, 0.47843137],
         [0.63921569, 0.61176471, 0.52156863],
         ...,
         [0.56078431, 0.52156863, 0.54509804],
         [0.56078431, 0.5254902 , 0.55686275],
         [0.56078431, 0.52156863, 0.56470588]]],


       [[[1.        , 1.        , 1.        ],
         [0.99215686, 0.99215686, 0.99215686],
         [0.99215686, 0.99215686, 0.99215686],
         ...,
         [0.99215686, 0.99215686, 0.99215686],
         [0.99215686, 0.99215686, 0.99215686],
         [0.99215686, 0.99215686, 0.99215686]],

        [[1.        , 1.        , 1.        ],
         [1.        , 1.        , 1.        ],
         [1.        , 1.        , 1.        ],
         ...,
         [1.        , 1.        , 1.        ],
         [1.        , 1.        , 1.        ],
         [1.        , 1.        , 1.        ]],

        [[1.        , 1.        , 1.        ],
         [0.99607843, 0.99607843, 0.99607843],
         [0.99607843, 0.99607843, 0.99607843],
         ...,
         [0.99607843, 0.99607843, 0.99607843],
         [0.99607843, 0.99607843, 0.99607843],
         [0.99607843, 0.99607843, 0.99607843]],

        ...,

        [[0.44313725, 0.47058824, 0.43921569],
         [0.43529412, 0.4627451 , 0.43529412],
         [0.41176471, 0.43921569, 0.41568627],
         ...,
         [0.28235294, 0.31764706, 0.31372549],
         [0.28235294, 0.31372549, 0.30980392],
         [0.28235294, 0.31372549, 0.30980392]],

        [[0.43529412, 0.4627451 , 0.43137255],
         [0.40784314, 0.43529412, 0.40784314],
         [0.38823529, 0.41568627, 0.38431373],
         ...,
         [0.26666667, 0.29411765, 0.28627451],
         [0.2745098 , 0.29803922, 0.29411765],
         [0.30588235, 0.32941176, 0.32156863]],

        [[0.41568627, 0.44313725, 0.41176471],
         [0.38823529, 0.41568627, 0.38431373],
         [0.37254902, 0.4       , 0.36862745],
         ...,
         [0.30588235, 0.33333333, 0.3254902 ],
         [0.30980392, 0.33333333, 0.3254902 ],
         [0.31372549, 0.3372549 , 0.32941176]]],


       ...,


       [[[0.28235294, 0.30196078, 0.21176471],
         [0.25490196, 0.29411765, 0.18431373],
         [0.30196078, 0.3372549 , 0.20392157],
         ...,
         [0.21568627, 0.27058824, 0.14901961],
         [0.23921569, 0.29411765, 0.16078431],
         [0.24313725, 0.30196078, 0.15294118]],

        [[0.24705882, 0.26666667, 0.19215686],
         [0.25490196, 0.29019608, 0.2       ],
         [0.30980392, 0.33333333, 0.23137255],
         ...,
         [0.23529412, 0.2627451 , 0.16078431],
         [0.21176471, 0.24705882, 0.13333333],
         [0.22352941, 0.2627451 , 0.1372549 ]],

        [[0.20392157, 0.22745098, 0.16470588],
         [0.20784314, 0.23529412, 0.16862745],
         [0.29019608, 0.30588235, 0.23529412],
         ...,
         [0.21176471, 0.21568627, 0.16470588],
         [0.13333333, 0.14509804, 0.08235294],
         [0.13333333, 0.15294118, 0.08235294]],

        ...,

        [[0.61960784, 0.62352941, 0.61176471],
         [0.58431373, 0.58823529, 0.56470588],
         [0.60784314, 0.61176471, 0.58431373],
         ...,
         [0.21176471, 0.24705882, 0.12156863],
         [0.28627451, 0.31372549, 0.18431373],
         [0.28235294, 0.30196078, 0.19215686]],

        [[0.70980392, 0.71372549, 0.70196078],
         [0.66666667, 0.67058824, 0.65490196],
         [0.64705882, 0.65098039, 0.62745098],
         ...,
         [0.21176471, 0.24705882, 0.12941176],
         [0.25098039, 0.27843137, 0.16078431],
         [0.25490196, 0.27058824, 0.17254902]],

        [[0.75294118, 0.75686275, 0.74117647],
         [0.70588235, 0.70588235, 0.69019608],
         [0.67843137, 0.68235294, 0.6627451 ],
         ...,
         [0.21960784, 0.25098039, 0.14117647],
         [0.23921569, 0.2627451 , 0.15686275],
         [0.27058824, 0.28627451, 0.2       ]]],


       [[[0.32156863, 0.3254902 , 0.29019608],
         [0.4745098 , 0.45882353, 0.45882353],
         [0.57647059, 0.54117647, 0.56862745],
         ...,
         [0.62745098, 0.63137255, 0.65882353],
         [0.74509804, 0.76078431, 0.78431373],
         [0.74509804, 0.77647059, 0.79607843]],

        [[0.23137255, 0.21176471, 0.16862745],
         [0.44313725, 0.40784314, 0.40784314],
         [0.58431373, 0.5372549 , 0.56862745],
         ...,
         [0.6627451 , 0.6745098 , 0.69803922],
         [0.77647059, 0.79607843, 0.81960784],
         [0.86666667, 0.89411765, 0.91372549]],

        [[0.25490196, 0.23137255, 0.16862745],
         [0.41176471, 0.38039216, 0.37254902],
         [0.54901961, 0.51764706, 0.54901961],
         ...,
         [0.6627451 , 0.69019608, 0.70980392],
         [0.81568627, 0.84313725, 0.8627451 ],
         [0.93333333, 0.95686275, 0.97647059]],

        ...,

        [[0.29803922, 0.29019608, 0.21960784],
         [0.27843137, 0.26666667, 0.21568627],
         [0.26666667, 0.25098039, 0.20784314],
         ...,
         [0.33333333, 0.37254902, 0.22745098],
         [0.34901961, 0.4       , 0.19607843],
         [0.35294118, 0.40392157, 0.18039216]],

        [[0.24705882, 0.23921569, 0.23137255],
         [0.24313725, 0.23529412, 0.24313725],
         [0.25098039, 0.23921569, 0.25882353],
         ...,
         [0.32941176, 0.37254902, 0.18431373],
         [0.32156863, 0.37647059, 0.14509804],
         [0.33333333, 0.38823529, 0.14509804]],

        [[0.2745098 , 0.2745098 , 0.26666667],
         [0.27843137, 0.2745098 , 0.28235294],
         [0.28235294, 0.27843137, 0.29411765],
         ...,
         [0.3372549 , 0.36862745, 0.25490196],
         [0.32156863, 0.36078431, 0.21960784],
         [0.31764706, 0.35686275, 0.21568627]]],


       [[[0.05882353, 0.09411765, 0.12941176],
         [0.03921569, 0.08235294, 0.12941176],
         [0.04705882, 0.09803922, 0.15294118],
         ...,
         [0.06666667, 0.17647059, 0.29411765],
         [0.0745098 , 0.17254902, 0.29019608],
         [0.07843137, 0.16862745, 0.29019608]],

        [[0.05490196, 0.09019608, 0.12941176],
         [0.03921569, 0.08235294, 0.12941176],
         [0.04313725, 0.09411765, 0.14901961],
         ...,
         [0.07058824, 0.18823529, 0.31372549],
         [0.07843137, 0.18823529, 0.31372549],
         [0.08235294, 0.18039216, 0.30980392]],

        [[0.03529412, 0.0745098 , 0.10980392],
         [0.03921569, 0.08235294, 0.12941176],
         [0.03921569, 0.09411765, 0.14509804],
         ...,
         [0.0745098 , 0.20392157, 0.34509804],
         [0.07843137, 0.2       , 0.3372549 ],
         [0.08627451, 0.19607843, 0.3372549 ]],

        ...,

        [[0.09803922, 0.09019608, 0.0627451 ],
         [0.16470588, 0.14901961, 0.10196078],
         [0.20392157, 0.18431373, 0.12156863],
         ...,
         [0.0627451 , 0.02352941, 0.00392157],
         [0.03921569, 0.        , 0.        ],
         [0.19607843, 0.15294118, 0.11372549]],

        [[0.06666667, 0.07843137, 0.06666667],
         [0.08627451, 0.09019608, 0.06666667],
         [0.08627451, 0.08627451, 0.05490196],
         ...,
         [0.2       , 0.15294118, 0.09019608],
         [0.17254902, 0.12156863, 0.0627451 ],
         [0.2745098 , 0.20784314, 0.13333333]],

        [[0.02745098, 0.03921569, 0.03529412],
         [0.02745098, 0.03529412, 0.02745098],
         [0.02745098, 0.03529412, 0.02745098],
         ...,
         [0.32156863, 0.24313725, 0.14509804],
         [0.27058824, 0.18431373, 0.07843137],
         [0.36078431, 0.25098039, 0.14117647]]]]), 'y_train': array([[0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 1.],
       [0., 0., 0., ..., 0., 0., 1.],
       ...,
       [0., 0., 0., ..., 0., 1., 0.],
       [0., 1., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 1., 0.]]), '_i5': "# Augment data\nif use_preprocessing:\n    datagen = ImageDataGenerator(\n        zoom_range=0.10,\n        horizontal_flip=True,\n        width_shift_range=0.1,\n        height_shift_range=0.1,\n        fill_mode='constant',\n        rotation_range=10)\n    datagen.fit(X_train)\n          \n    X_aug = [X_train]\n    y_aug = [y_train]\n    for i in range(2):\n        X_gen, y_gen = next(datagen.flow(X_train,  y_train, batch_size=len(X_train)))\n        X_aug.append(X_gen)\n        y_aug.append(y_gen)\n        \n    X_train = np.concatenate(tuple(X_aug))\n    y_train = np.concatenate(tuple(y_aug))\n    del X_aug, y_aug, X_gen, y_gen\n    print(X_train.shape, X_train.shape)", '_i6': "def display_grid(dataset, digit_size=32, grid_size=5, seed=None):\n    # Display some digits to figure out what's going on\n    figure = np.zeros((digit_size * grid_size, digit_size * grid_size, 3))\n   \n    if seed is not None:\n        np.random.seed(seed)\n    for i in range(grid_size):\n        for j in range(grid_size):\n            digit = dataset[np.random.randint(len(dataset))]\n            d_x, d_y = i * digit_size, j * digit_size\n            figure[d_x:d_x + digit_size, d_y:d_y + digit_size, :] = digit.astype(float)\n            \n    plt.figure(figsize=(5, 5))\n    plt.imshow(figure)\n    plt.show()\n\ndisplay_grid(X_train, seed=0)\ndisplay_grid(X_test, seed=0)", 'display_grid': <function display_grid at 0x7f439cba4f28>, '_i7': "def make_model():\n    x_input = Input(batch_shape=(None,) + original_img_size)\n    resnet_model = ResNet50(weights=None, pooling='avg', input_shape=original_img_size, include_top=False)\n    model_out = resnet_model(x_input)\n    out = Dense(num_classes, activation='softmax', name='fc10')(model_out)\n    model = Model(x_input, out, name='myresent50')\n    return model", 'make_model': <function make_model at 0x7f4336d71ae8>, '_i8': 'def train_model(model, y_train_vals):\n    optimizer = Adam(lr=learning_rate, decay=decay)\n    model.compile(optimizer=optimizer,\n                  loss=\'categorical_crossentropy\',\n                  metrics=[\'accuracy\'])\n    \n    start = time.time()\n    \n    early_stopping = keras.callbacks.EarlyStopping(\'val_acc\', min_delta=0.1, patience=20)\n    reduce_lr = keras.callbacks.ReduceLROnPlateau(monitor=\'val_acc\', factor=0.1, patience=10, min_lr=0.01 * learning_rate)\n    \n    callbacks=[early_stopping, reduce_lr]\n    if \'CMDLINE\' not in os.environ:\n        callbacks += [TQDMNotebookCallback()]\n        \n    history = model.fit(\n         X_train, y_train_vals,\n         batch_size=batch_size,\n         epochs=epochs,\n         callbacks=callbacks,\n         validation_data=(X_validation, y_validation),\n         verbose=0\n     )\n    \n    done = time.time()\n    elapsed = done - start\n    print("Elapsed: ", elapsed)\n    \n    return model, history', 'train_model': <function train_model at 0x7f4335e19e18>, '_i9': 'model = make_model()\nmodel.summary()', 'model': <keras.engine.training.Model object at 0x7f422a9f40f0>, '_i10': '# Testing\n# epochs=1\n# model, history = train_model(model, y_train)\n# history.history', '_i11': 'y_train_predict = y_train\nfor i in range(3):\n    print("Iteration", i)\n    model = make_model()\n    model.summary()\n    model, history = train_model(model, y_train_predict)\n    \n    df = pd.DataFrame(history.history)\n    display(df.describe(percentiles=[0.25 * i for i in range(4)] + [0.95, 0.99]))\n    df.plot(figsize=(8, 6))\n    df.to_csv(file_prefix + (\'history_iter%d\' % i) + \'.csv\', index=False)\n    with open(file_prefix + \'vars.txt\', \'w\') as f:\n        f.write(str(locals()))\n    \n    y_train_predict = model.predict(X_train)\n    y_train_predict\n    \n    test_results = model.evaluate(X_test, y_test)\n    print(test_results)\n    with open(\'allresults.csv\', \'a\') as f:\n        line = \',\'.join([str(use_preprocessing), str(run_num), str(i)] + [str(x) for x in test_results])\n        f.write(line + \'\\n\')', 'y_train_predict': array([[4.1622476e-05, 8.1772261e-05, 4.9112927e-02, ..., 9.4243521e-03,
        2.5173063e-05, 4.3036716e-06],
       [2.1681075e-03, 1.3931596e-04, 2.8942010e-05, ..., 2.6750729e-05,
        8.8566530e-04, 9.9670285e-01],
       [1.8278176e-01, 3.5721888e-03, 7.7530029e-03, ..., 1.1500897e-02,
        2.3327804e-01, 5.5565673e-01],
       ...,
       [1.6755736e-03, 1.6030556e-01, 4.7902497e-03, ..., 8.1828039e-05,
        8.1507164e-01, 7.6312539e-03],
       [1.7428846e-04, 9.1490924e-01, 3.3262742e-05, ..., 6.2481192e-08,
        5.5349529e-02, 2.9420368e-02],
       [9.7088329e-02, 8.0199845e-02, 1.9871200e-02, ..., 3.3528698e-03,
        6.0615963e-01, 6.1494239e-02]], dtype=float32), 'i': 2, 'history': <keras.callbacks.History object at 0x7f42292c4898>, 'df':      val_loss   val_acc      loss       acc       lr
0    2.491787  0.196800  1.809716  0.409059  0.00100
1    1.736017  0.396667  1.366643  0.565435  0.00100
2    1.563465  0.467867  1.212841  0.630824  0.00100
3   14.482645  0.101467  1.114499  0.688165  0.00100
4    1.533759  0.465600  1.334538  0.586965  0.00100
5    1.462511  0.505600  1.244938  0.627576  0.00100
6    1.270422  0.544000  1.115969  0.678329  0.00100
7    1.392992  0.511600  1.040348  0.716094  0.00100
8    1.278632  0.570133  0.988966  0.746376  0.00100
9   14.508434  0.099867  0.964527  0.769459  0.00100
10  14.561743  0.095067  1.301546  0.628282  0.00100
11   2.938925  0.334933  1.608094  0.478729  0.00100
12   1.426618  0.498400  1.349520  0.579106  0.00100
13   1.379006  0.514667  1.240546  0.631176  0.00100
14   2.053177  0.408667  1.267901  0.626400  0.00100
15   1.476115  0.498400  1.209902  0.649153  0.00100
16   1.687023  0.452800  1.142445  0.678682  0.00100
17   2.041292  0.347200  1.136294  0.682847  0.00100
18   3.377154  0.326267  1.111177  0.688424  0.00100
19   1.441126  0.495600  1.030094  0.728376  0.00100
20   1.184008  0.588000  0.955827  0.771176  0.00010
21   1.179515  0.597733  0.934958  0.783976  0.00010
22   1.180957  0.602133  0.916202  0.792894  0.00010
23   1.182798  0.602533  0.903255  0.800188  0.00010
24   1.178604  0.606400  0.893342  0.809224  0.00010
25   1.221442  0.588800  0.884837  0.812376  0.00010
26   1.195779  0.598667  0.874958  0.819435  0.00010
27   1.216555  0.594267  0.867650  0.826000  0.00010
28   1.165036  0.607600  0.856953  0.833341  0.00010
29   1.138505  0.615600  0.849517  0.840541  0.00010
30   1.207636  0.593067  0.850557  0.840824  0.00010
31   1.224673  0.590800  0.852274  0.838941  0.00010
32   1.221564  0.586667  0.838513  0.850565  0.00010
33   1.194082  0.598400  0.826685  0.858047  0.00010
34   1.156540  0.610133  0.817294  0.865247  0.00010
35   1.205798  0.596800  0.809163  0.871435  0.00010
36   1.212661  0.597867  0.803479  0.877553  0.00010
37   1.234232  0.589733  0.798469  0.883671  0.00010
38   1.237830  0.594400  0.792687  0.886165  0.00010
39   1.254433  0.582800  0.793255  0.884753  0.00010
40   1.220831  0.596667  0.797324  0.881129  0.00010
41   1.224072  0.599600  0.774344  0.901694  0.00001
42   1.222331  0.599467  0.770095  0.903224  0.00001
43   1.225729  0.599333  0.768493  0.906094  0.00001
44   1.217460  0.600133  0.769999  0.907412  0.00001
45   1.232063  0.598933  0.767453  0.909341  0.00001, 'f': <_io.TextIOWrapper name='results_cifar10_preproc_0_run_2_vars.txt' mode='w' encoding='UTF-8'>, 'test_results': [1.4272404054641723, 0.5925], 'line': '0,2,1,1.4272404054641723,0.5925'}